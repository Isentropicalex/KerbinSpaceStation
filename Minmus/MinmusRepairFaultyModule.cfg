CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = MinmusRepairFaultyModule

    // Contract title is displayed in the window in the corner, should be
    // short and descriptive
    title = Repair a faulty Power Module on the KSS

    description = Telemetry indicates that the power module on the Minmus Space Station is malfunctioning. Send an engineer to repair it.

        // The contract synopsis appears in bold.  Give a quick summary of the
    // contract objective.
    synopsis = Send an Engineer on EVA to repair the faulty power module.

    // The completedMessage is the message that is displayed when the
    // contract completes.
    completedMessage = Telemetry seems to be all ok. The faulty module is repaired!

    // Contract min/max expiry in days.  If both are set to 0.0, it will
    // result in a contract that never expires.
    // Default = 1.0 and 7.0 days, respectively
    minExpiry = 1
    maxExpiry = 30
	
	group = MinmusTier3

    // Contract deadline in days.  Default is no deadline.
    deadline = Random(500, 1000)

    // Controls for whether a contract can be declined or cancelled, default
    // is true for both
    cancellable = true
    declinable = true

    // Target Celestial body - controls where the contract must be
    // completed, has some automated effects on numeric values (increasing
    // science, etc.).  Also gets used in some of the parameter classes.
    //
    // Default = null (no celestial body)
    targetBody = Minmus

    // The maximum instances of this contract that can be active at one
    // time (0 being unlimited).
    // Default = 0
    maxSimultaneous = 1

    // Contract rewards
    rewardScience = 0
    rewardReputation = Random(1.0, 20.0)
    rewardFunds = Random(50000, 500000.0)
    failureReputation = Random(1.0, 10.0)
    failureFunds = Random(1.0, 50000.0)
    advanceFunds = Random(1.0, 50000.0)

weight = 0.2
DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ MinmusStationNEW ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [ Minmus ].Random()
	}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}
PARAMETER
{
    name = Sequence
    type = Sequence
	hiddenParameter = Engineer
PARAMETER
{
    name = VesselParameterGroup
    type = VesselParameterGroup
	
	vessel = MinmusStationNEW

PARAMETER
{
    name = HasCrew
    type = HasCrew

    // (Optional) The type of trait required.  Valid values are:
    //    Pilot
    //    Engineer
    //    Scientist
    trait = Engineer

    title = Kerbal must be an engineer and on board Minmus Station.
}
}
PARAMETER
{
name = Engineer
type = All

PARAMETER
{
    name = VesselIsType
    type = VesselIsType
    vesselType = EVA
	completeInSequence = True
}
PARAMETER
{
    name = HasCrew
    type = HasCrew

    // (Optional) The type of trait required.  Valid values are:
    //    Pilot
    //    Engineer
    //    Scientist
    trait = Engineer 
	completeInSequence = True
}

PARAMETER
{
    name = Duration
    type = Duration

    duration = 2m
preWaitText = Waiting for an Engineer.
waitingText = Repair in progress
    // The completionText is displayed when the timer completes.
    // Default = Wait time over
    completionText = Module repaired! Get back to the station.
	    completeInSequence = true
}
	disableOnStateChange = true
title = Send your Engineer on EVA to fix the panel.
	}
	}
	

REQUIREMENT
{
name = All
type = All
REQUIREMENT
{
    name = Rotation
    type = CompleteContract

    contractType = MinmusCrewRotation
	
	minCount = 1
	cooldownDuration = Random(60d, 120d)
}
REQUIREMENT
{
    name = Tier3
    type = CompleteContract

    contractType = MinmusRepairFaultyModule
	
	minCount = 0
	cooldownDuration = Random(100d, 120d)
	}
	REQUIREMENT
	{
    name = Tier3
    type = CompleteContract

    contractType = MinmusReplaceFaultyModule
	
	minCount = 0
	cooldownDuration = Random(60d, 120d)
}
REQUIREMENT
	{
    name = Tier3
    type = CompleteContract

    contractType = MinmusEvacuate
	
	minCount = 0
	cooldownDuration = Random(60d, 120d)
}
	REQUIREMENT:NEEDS[TACLifeSupport]
{
name = Tier3
type = CompleteContract
contractType = MinmusLSResupply
minCount = 0
cooldownDuration = Random(60d, 120d)
}
REQUIREMENT
{
name = Tier3
type = CompleteContract

contractType = MinmusScienceExperimentModule

minCount = 0
cooldownDuration = Random(60d, 120d)
}
}
}
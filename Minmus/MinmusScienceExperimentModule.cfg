    CONTRACT_TYPE
    {
        // Unique name of the contract type (required)
        name = MinmusScienceExperimentModule

        // Contract text details
        title = Perform a science experiment on the station
        description = Our research department wants to know if orbiting Minmus changes the readings.
        synopsis = Launch a new experiment, dock to the Minmus station, complete the experiment while docked, then return the experiment to Kerbin.
        completedMessage = We now have a better understanding of something we know nothing about!
		notes = If you are using the Science>Funds strategy at 100% - this contract will not complete.
		
		// Contract min/max expiry in days.  Default is a contract that does not
        // expire.
        minExpiry = 1
        maxExpiry = 30

        // Contract deadline in days.  Default is no deadline.
        deadline = Random(500, 1000)

        // Controls for whether a contract can be declined or cancelled, default is
        // true for both
        cancellable = true
        declinable = true

        // Target Celestial body - controls where the contract must be completed,
        // has some automated effects on numeric values (increasing science, etc.).
        // Also gets used in some of the parameter classes.
        //
        // Default = null (no celestial body)
        targetBody = Minmus
		weight = 0.5
		
		group = MinmusTier3

maxSimultaneous = 1

        // Contract rewards
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)

DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ MinmusStationNEW ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [ Minmus ].Random()
	}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}
	
	PARAMETER
{
    name = ScienceExperiment
    type = VesselParameterGroup

    // The title text to display.
    // Default - Vessel: Any; Duration: <duration>
    // Note in future this will be expanded to support setting the parameters to
    // be for a specific vessel
    title = Launch a new science experiment for the station

PARAMETER
{
    name = Docking
    type = Docking

    // The vessel attribute is the *defined* name of the vessel that must
    // participate in the docking event.  This is a name of a vessel
    // defined either with the define attribute of a VesselParameterGroup
    // parameter, or via a SpawnVessel.
    //
    // If this Docking parameter is a child of a VesselParameterGroup
    // parameter, then no more than *one* vessel should be provided (the
    // other is the vessel being tracked under the VesselParameterGroup).
    // If no vessel attributes are provided, the second vessel will match
    // any vessel.
    //
    // If this Docking parameter is NOT a child of a VesselParameterGroup,
    // then *at least one* vessel must be provided.  If only one vessel is
    // provided, then the second vessel will match any vessel.
    vessel = MinmusStationNEW

    // New defined name by which to refer to the docked vessel.  Use this
    // to chain docking parameters, but require them to be done in a certain
    // order.  Generally this name will never be displayed to the player.
    // Need to check that we are docking to the right vessel
    //defineDockedVessel = MinmusStationNEW

    // Text for the contract parameter.
    // Default varies depending on the situation.
    title = Dock with the Minmus Space Station
}
PARAMETER
{
    name = CollectScience
    type = CollectScience

    // Defaulted from the contract type if not provided
    targetBody = Minmus

    // (Optional) Specifies the biome for which science should be collected.
    // This can be any biome that is valid for the target body, but note that
    // it is not currently validated.
    //biome = Craters

    // (Optional) Specifies the situation under which science should be
    // collected.
    // Valid values are:
    //    SrfLanded
    //    SrfSplashed
    //    FlyingLow
    //    FlyingHigh
    //    InSpaceLow
    //    InSpaceHigh
    //situation = InSpaceLow

    // (Optional) Specifies where the experiment should take place.
    // Valid values are "Surface" and "Space"
    location = Space

    // (Optional) Specifies the experiment to be run, can be any valid
    // expirement in stock KSP or added by mods.  The stock list is:
    //    asteroidSample
    //    crewReport
    //    evaReport
    //    mysteryGoo
    //    surfaceSample
    //    mobileMaterialsLab
    //    temperatureScan
    //    barometerScan
    //    seismicScan
    //    gravityScan
    //    atmosphereAnalysis
    //experiment = 

    // (Optional) The method for which the science must be recovered.
    // Defaults to None if not specified.
    // Valid values are:
    //    None
    //    Recover
    //    Transmit
    //    RecoverOrTransmit
    recoveryMethod = Recover
}
}

REQUIREMENT
{
name = All
type = All
REQUIREMENT
{
    name = Rotation
    type = CompleteContract

    contractType = MinmusCrewRotation
	
	minCount = 1
	cooldownDuration = Random(30d, 120d)
}
REQUIREMENT
{
    name = Tier3
    type = CompleteContract

    contractType = MinmusRepairFaultyModule
	
	minCount = 0
	cooldownDuration = Random(30d, 120d)
	}
	REQUIREMENT
	{
    name = Tier3
    type = CompleteContract

    contractType = MinmusReplaceFaultyModule
	
	minCount = 0
	cooldownDuration = Random(30d, 120d)
}
	REQUIREMENT
	{
    name = Tier3
    type = CompleteContract

    contractType = MinmusEvacuate
	
	minCount = 0
	cooldownDuration = Random(30d, 120d)
}
	REQUIREMENT:NEEDS[TACLifeSupport]
{
name = Tier3
type = CompleteContract
contractType = MinmusLSResupply
minCount = 1
cooldownDuration = Random(30d, 120d)
}
	REQUIREMENT
{
name = FAILSAFE
type = CompleteContract

contractType = MinmusScienceExperimentModule

minCount = 0
cooldownDuration = Random(100d, 120d)
}
}
}
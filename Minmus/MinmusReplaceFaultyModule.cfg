CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = MinmusReplaceFaultyModule

    // Contract title is displayed in the window in the corner, should be
    // short and descriptive
    title = Replace a faulty Power Module on the Minmus Station

    description = Telemetry indicates that the power module on the Minmus Space Station is about to fail, go and replace it.

        // The contract synopsis appears in bold.  Give a quick summary of the
    // contract objective.
    synopsis = Launch a new Power Module for the Minmus Space Station

    // The completedMessage is the message that is displayed when the
    // contract completes.
    completedMessage = The new module is in place. Good job!

    // Contract min/max expiry in days.  If both are set to 0.0, it will
    // result in a contract that never expires.
    // Default = 1.0 and 7.0 days, respectively
    minExpiry = 1
    maxExpiry = 30
	
	group = MinmusTier3

    // Contract deadline in days.  Default is no deadline.
    deadline = Random(500, 1000)

    // Controls for whether a contract can be declined or cancelled, default
    // is true for both
    cancellable = true
    declinable = true

    // Target Celestial body - controls where the contract must be
    // completed, has some automated effects on numeric values (increasing
    // science, etc.).  Also gets used in some of the parameter classes.
    //
    // Default = null (no celestial body)
    targetBody = Minmus

    // The maximum instances of this contract that can be active at one
    // time (0 being unlimited).
    // Default = 0
    maxSimultaneous = 1

    // Contract rewards
    rewardScience = 0
    rewardReputation = Random(1.0, 20.0)
    rewardFunds = Random(1.0, 100000.0)
    failureReputation = Random(1.0, 10.0)
    failureFunds = Random(1.0, 10000.0)
    advanceFunds = Random(1.0, 10000.0)

weight = 0.1
DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ MinmusStationNEW ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [ Minmus ].Random()
	}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}
         PARAMETER
{
    name = PowerModule
    type = VesselParameterGroup

    // The title text to display.
    // Default - Vessel: Any; Duration: <duration>
    // Note in future this will be expanded to support setting the parameters to
    // be for a specific vessel
    title = It should be self sustaining and docked to our Station.

	//make sure the module has some form of power generation.
	PARAMETER
{
    name = RTGSolar
    type = Any
    PARAMETER
    {
    name = PartValidationRTG
    type = PartValidation

    // PartModule(s) to check for.  Optional, and can be specified multiple times.
    partModule = ModuleDeployableSolarPanel

    // Minimum count, default = 1
    minCount = 1
	title = Have a Solar Panel on board
    }
    PARAMETER
    {
    name = PartValidationSolar
    type = PartValidation

    // PartModule(s) to check for.  Optional, and can be specified multiple times. Looking for an RTG
    partModule = ModuleGenerator

    // Minimum count, default = 1
    minCount = 1
title = Have a RTG on board
    }
		    PARAMETER:NEEDS[NearFutureSolar]
    {
    name = PartValidationNFE
    type = PartValidation

    // PartModule(s) to check for.  Optional, and can be specified multiple times.
    partModule = ModuleCurvedSolarPanel
    // Minimum count, default = 1
    minCount = 1
	title = Have a Solar Panel on board
    }
}
	 
		 PARAMETER
{
    name = Docking
    type = Docking

    vessel = MinmusStationNEW
	defineDockedVessel = MinmusStationNEW
	title = Dock with the Minmus Station
completeInSequence = true
		}
		}
	
REQUIREMENT
{
name = All
type = All
REQUIREMENT
{
    name = Rotation
    type = CompleteContract

    contractType = MinmusCrewRotation
	
	minCount = 1
	cooldownDuration = Random(60d, 120d)
}
REQUIREMENT
{
    name = Tier3
    type = CompleteContract

    contractType = MinmusRepairFaultyModule
	
	minCount = 0
	cooldownDuration = Random(60d, 120d)
	}
	REQUIREMENT
	{
    name = Tier3
    type = CompleteContract

    contractType = MinmusReplaceFaultyModule
	
	minCount = 0
	cooldownDuration = Random(100d, 120d)
}
REQUIREMENT
	{
    name = Tier3
    type = CompleteContract

    contractType = MinmusEvacuate
	
	minCount = 0
	cooldownDuration = Random(60d, 120d)
}
REQUIREMENT:NEEDS[TACLifeSupport]
{
name = Tier3
type = CompleteContract
contractType = MinmusLSResupply
minCount = 0
cooldownDuration = Random(60d, 120d)
}
REQUIREMENT
{
name = Tier3
type = CompleteContract

contractType = MinmusScienceExperimentModule

minCount = 0
cooldownDuration = Random(60d, 120d)
}
}
}

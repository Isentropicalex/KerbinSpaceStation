CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = Evacuate

    // Contract title is displayed in the window in the corner, should be
    // short and descriptive
    title = Evacuate @/targetVessel

    // Reference to a CONTRACT_GROUP node which supplies additional rules
    // for limiting the number of contracts within a given group.
    group = KSSEmergencyMissions

    // Two options for specifying the description:
    // 1) Supply the full text here in the description field
    description = We're picking up some worrying readings from our instruments on @/targetVessel. To be on the safe side, we think you had better evacuate! (quickly)
    synopsis = Evacuate @/targetVessel
    completedMessage = Phew, it was a false alarm. Still, well done for saving everybody.
	weight = 0.05
    minExpiry = 1
    maxExpiry = 30
    deadline = 500
//not cancellable this is an emergency
    cancellable = false
    declinable = false
	maxSimultaneous = 1
    rewardScience = 0.0
    rewardReputation = Random(1, 20.0)
    rewardFunds = Random(50000.0, 500000.0)
    failureReputation = Random(1, 10.0)
    failureFunds = Random(1, 50000.0)
    advanceFunds = Random(1, 50000.0)
	
	DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ LKOStationNEW, MunStationNEW, MinmusStationNEW, DunaStationSM ].Where(b => b.CrewCount()>1).Random()
}
DATA
{
type = CelestialBody
requiredValue = true
targetBody = @/targetVessel.CelestialBody()
}
PARAMETER
{
    name = VesselParameterGroup
    type = VesselParameterGroup
	vessel = @/targetVessel
    PARAMETER
    {
        name = HasCrew
        type = HasCrew
        minCrew = 0
		maxCrew = 0
		title = Leave no Kerbals on board @/targetVessel
		}
	}
		PARAMETER
    name = VesselParameterGroup
    type = VesselParameterGroup
	define = EscapeModule
	{
	PARAMETER
	{
	name = ReachState
    type = ReachState
	targetBody = @/targetBody
	situation = LANDED
	title = Land your crew on @/targetBody
	}
		REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}
	}
	}

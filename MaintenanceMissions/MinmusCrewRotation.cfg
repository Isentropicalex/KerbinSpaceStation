CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = MinmusCrewRotation
    title = Minmus Station Crew Rotation
	group = KSSMaintenanceMissions
    description = Time to give your crew a break. Go and rotate the crew of @/targetVessel
    synopsis = Go and rotate the crew of @/targetVessel
    completedMessage = Mission Complete! The returned crew members are going for a pint. Care to join?

    minExpiry = 1
    maxExpiry = 30
    deadline = Random(1, 500)
    cancellable = true
    declinable = true
    targetBody = Minmus
    maxSimultaneous = 1

	rewardScience = 0.0
    rewardReputation = Random(1, 20.0)
    rewardFunds = Random(50000.0, 500000.0)
    failureReputation = Random(1, 10.0)
    failureFunds = Random(1, 50000.0)
    advanceFunds = Random(1, 50000.0)

weight = 0.8

		DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ MinmusStationNEW ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [ Minmus ].Random()
	}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}
	
PARAMETER
{
    name = Rotation
    type = VesselParameterGroup
    title = Send up a new Crew.

	//make sure that kerbals have somewhere to live.
    PARAMETER
    {
    name = HabModuleChild
    type = HasCrewCapacity

    // Minimum count, default = 1
    minCapacity = 1
	title = Rotate the crew
    }
         PARAMETER
{
    name = Docking
    type = Docking

    vessel = MinmusStationNEW
	defineDockedVessel = MinmusStationNEW
	title = Dock with @/targetVessel
		}
		PARAMETER
{
    name = HasCrew
    type = HasCrew

    // (Optional) Minimum and maximum count.  Default values are 1 and
    // int.MaxValue (for min/max).
    minCrew = Random(1, 5)
   disableOnStateChange = true
}
}

PARAMETER
{
    name = ReturnHome
    type = ReturnHome

    // Text for the contract parameter.
    // Default = Return home.
    title = Rotate the crew and return home
	completeInSequence = true
}

REQUIREMENT
{
name = All
type = All
REQUIREMENT
{
    name = Rotation
    type = CompleteContract

    contractType = MinmusCrewRotation
	
	minCount = 0
	cooldownDuration = Random(30d, 120d)
}
	REQUIREMENT:NEEDS[TACLifeSupport]
{
name = Tier3
type = CompleteContract
contractType = MinmusLSResupply
minCount = 1
cooldownDuration = Random(30d, 120d)
}
	REQUIREMENT
{
name = Tier3
type = CompleteContract

contractType = MinmusScienceExperimentModule

minCount = 0
cooldownDuration = Random(30d, 120d)
}
}
}
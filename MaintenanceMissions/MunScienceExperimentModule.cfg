    CONTRACT_TYPE
    {
        // Unique name of the contract type (required)
        name = MunScienceExperimentModule

        // Contract text details
        title = Perform a science experiment on the station
        description = Our research department wants to know if orbiting Mun changes the readings.
        synopsis = Launch a new experiment, dock to the Mun station, complete the experiment while docked, then return the experiment to Kerbin.
        completedMessage = We now have a better understanding of something we know nothing about!
		notes = If you are using the Science>Funds strategy at 100% - this contract will not complete.
		
		minExpiry = 1
        maxExpiry = 30

        deadline = Random(1,500)

        cancellable = true
        declinable = true

        targetBody = Mun
		
		group = KSSMaintenanceMissions

maxSimultaneous = 1
weight = 0.5

        // Contract rewards
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)

DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ MunStationNEW ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [ Mun ].Random()
	}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}
	
PARAMETER
{
    name = Docking
    type = Docking

    vessel = MunStationNEW
    defineDockedVessel = MunStationNEW

    title = Dock with @/targetVessel
}
PARAMETER
{
    name = CollectScience
    type = CollectScience

    targetBody = Mun
    location = Space
    recoveryMethod = Recover
	completeInSequence = true
	title = Perform science on @/targetVessel and return it to Kerbin
}

REQUIREMENT
{
name = All
type = All
REQUIREMENT
{
    name = Rotation
    type = CompleteContract

    contractType = MunCrewRotation
	
	minCount = 1
	cooldownDuration = Random(60d, 120d)
}
	REQUIREMENT:NEEDS[TACLifeSupport]
{
name = Tier3
type = CompleteContract
contractType = MunLSResupply
minCount = 1
cooldownDuration = Random(60d, 120d)
}
	REQUIREMENT
{
name = FAILSAFE
type = CompleteContract

contractType = MunScienceExperimentModule

minCount = 0
cooldownDuration = Random(60d, 120d)
}
}
}
CONTRACT_TYPE
{
    name = DunaMaintenance
    title = @/targetVessel Maintenance
	group = KSSMaintenanceMissions
    description = It's time to resupply @/targetVessel
    synopsis = Resupply @/targetVessel, rotate the crew, and return to Kerbin.
    completedMessage = Well done!
    minExpiry = 1
    maxExpiry = 30
    deadline = Random(1, 500)
    cancellable = true
    declinable = true
    targetBody = Duna
    maxSimultaneous = 1
	rewardScience = 0.0
    rewardReputation = Random(1, 20.0)
    rewardFunds = Random(50000.0, 500000.0)
    failureReputation = Random(1, 10.0)
    failureFunds = Random(1, 50000.0)
    advanceFunds = Random(1, 50000.0)
weight = 0.8
		DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ DunaStation, DunaStationSM ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [Duna ].Random()
	}

PARAMETER
{
    name = Rotation
    type = VesselParameterGroup
    title = Send up a new Crew.
	   
    PARAMETER
{
    name = Docking
    type = Docking
	defineDockedVessel = @/targetVessel
	vessel = @/targetVessel
	title = Dock with @/targetVessel
	disableOnStateChange = true
		}
		PARAMETER
{
    name = HasCrew
    type = HasCrew

    // (Optional) Minimum and maximum count.  Default values are 1 and
    // int.MaxValue (for min/max).
    minCrew = Random(1, 5)
   disableOnStateChange = true
}
}
	PARAMETER:NEEDS[TACLifeSupport]
	{
	name = Food
	type = HasResource
	
	resource = Food
	minQuantity = 1
	
	title = Supply Life Support to @/targetVessel
	}
PARAMETER
{
    name = ReturnHome
    type = ReturnHome
    title = Rotate the crew and return home
	completeInSequence = true
}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}
REQUIREMENT
{
    name = StationHabitable
    type = CompleteContract

    contractType = DunaStationCore
	
	minCount = 1
}
REQUIREMENT
{
    name = Rotation
    type = CompleteContract

    contractType = DunaMaintenance
	
	minCount = 0
	cooldownDuration = Random(30d, 120d)
}
}
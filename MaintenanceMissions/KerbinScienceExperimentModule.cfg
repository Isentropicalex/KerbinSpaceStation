    CONTRACT_TYPE
    { //basic contract info
        name = KerbinScienceExperimentModule
        title = Perform a science experiment on @/targetVessel
        description = Our research department wants to know what the effects of space will be on something besides a Kerbal.
        synopsis = Launch a new experiment, dock with @/targetVessel, complete the experiment while docked, then return the experiment to Kerbin.
        completedMessage = We now have a better understanding of something we know nothing about!
        minExpiry = 1
        maxExpiry = 30
        deadline = Random(1,500)
        cancellable = true
        declinable = true
        targetBody = Kerbin
		weight = 0.5
		group = KSSMaintenanceMissions
		maxSimultaneous = 1
		//rewards no science, random
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)

		//data notes for FAILSAFE
		DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ LKOStationNEW ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [Kerbin ].Random()
	}
	PARAMETER
{
    name = ScienceExperiment
    type = VesselParameterGroup
    title = Launch a new science experiment for @/targetVessel
	notes = If you are using the Science>Funds strategy at 100% - this contract will not complete.

	//dock with Station
PARAMETER
{
    name = Docking
    type = Docking

   vessel = LKOStationNEW
   defineDockedVessel = LKOStationNEW
    title = Dock with @/targetVessel
}

//collect Science
PARAMETER
{
    name = CollectScience
    type = CollectScience

    targetBody = Kerbin
    location = Space
    recoveryMethod = Recover
	title = Recover the science at Kerbin.
	completeInSequence = true
}
}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}
REQUIREMENT
{
name = All
type = All
REQUIREMENT
{
    name = Rotation
    type = CompleteContract

    contractType = KerbinCrewRotation
	
	minCount = 1
	cooldownDuration = Random(60d, 120d)
}
	REQUIREMENT:NEEDS[TACLifeSupport]
{
name = Tier3
type = CompleteContract
contractType = KerbinLSResupply
minCount = 1
cooldownDuration = Random(60d, 120d)
}
	REQUIREMENT
{
name = FAILSAFE
type = CompleteContract

contractType = KerbinScienceExperimentModule

minCount = 0
cooldownDuration = Random(60d, 120d)
}
REQUIREMENT
{
name = FAILSAFE
type = CompleteContract

contractType = KerbinStationCore

minCount = 1
}
}
}
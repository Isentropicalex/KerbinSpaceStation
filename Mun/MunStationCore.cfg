CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = MunStationCore
	group = MunStation
    title = Launch the Mun Space Station!
    description = We've been very happy with our station around Kerbin. Let's put one around Mun now!
    synopsis = Build a new Space Station in orbit around Mun.
    completedMessage = The Station is in place!

    // Contract min/max expiry in days.  Default is a contract that does not
        // expire.
        minExpiry = 1
        maxExpiry = 30
        deadline = Random(500, 1000)
        cancellable = true
        declinable = true
        targetBody = Mun
//Rewards
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)

DATA
{
    type = Vessel
	requiredValue = false
    targetVessel = [ MunStationNEW ].Random()
}

    //Define the new station.
    PARAMETER
    {
        name = NewStation
        type = VesselParameterGroup
        hideChildren = true
        title = Launch a new Station Core in orbit around Mun
        notes = The station must include 1 Docking Port and support 5 Kerbals.  This can be done in one launch, or multiple launches.
        //defines the Mun Station.
        define = MunStationNEW

        PARAMETER
        {
            name = Mun
            type = Orbit
            hideChildren = true

            //Reach Low Mun Orbit.
            targetBody = Mun
            situation = ORBITING
            maxAltitude = 249000
        }

        //Check for a Docking Port
      PARAMETER
{
    name = PartValidation
    type = PartValidation
	partModule = ModuleDockingNode
	minCount = 1
	}

        PARAMETER
        {
            name = HabModuleChild
            type = HasCrewCapacity

            // Minimum count, default = 1
            minCapacity = 5
            title = Support 5 Kerbals
        }

        PARAMETER
        {
            name = RTGSolar
            type = Any
            title = Have one of the following power generators

            PARAMETER
            {
                name = PartValidationRTG
                type = PartValidation
                hideChildren = true
                title = 1 or more solar panels

                // PartModule(s) to check for.  Optional, and can be specified multiple times.
                partModule = ModuleDeployableSolarPanel

                // Minimum count, default = 1
                minCount = 1
            }
                
            PARAMETER
            {
                name = PartValidationSolar
                type = PartValidation
                hideChildren = true
                title = 1 or more generators

                // PartModule(s) to check for.  Optional, and can be specified multiple times. Looking for an RTG
                partModule = ModuleGenerator

                // Minimum count, default = 1
                minCount = 1
            }
			PARAMETER:NEEDS[NearFutureSolar]
			{
			name = PartValidationNearFutureSolar
			type = PartValidation
			title = 1 or more curved solar panels
			partModule = ModuleCurvedSolarPanel
			minCount = 1
			hideChildren = true
			}
        }

        PARAMETER:NEEDS[!StationScience]
        {
            name = ScienceLab
            type = PartValidation
            title = Have a Science Lab on board

            hideChildren = true
            // The name of the part to check for. Optional.
            partModule = ModuleScienceLab
        }

        PARAMETER:NEEDS[StationScience]
        {
            name = StationScienceSupport
            type = Any
            title = Have any type of Science Lab on board

            PARAMETER
            {
                name = PartValidation
                type = PartValidation
                title = 1 or more standard science labs
                hideChildren = true

                // The name of the part to check for. Optional.
                partModule = ModuleScienceLab
            }

            PARAMETER
            {
                name = PartValidation
                type = PartValidation
                title = 1 or more research facilities
                hideChildren = true

                // The name of the part to check for. Optional.
                partModule = ResearchFacility
                title = Station Science Lab
            }
        }

        PARAMETER
        {
            name = PartValidation
            type = PartValidation
            hideChildren = true
			optional = true
            
            part = cupola
            minCount = 1
            title = Include a cupola (optional)
        }
    }

	REQUIREMENT
{
    name = PartModuleUnlocked
    type = PartModuleUnlocked

    // PartModule that needs to be unlocked.  May be specified multiple
    // times.
    partModule = ModuleDockingNode
	}
	
REQUIREMENT
{
name = Any
type = Any
	REQUIREMENT
	{
    name = PartModuleUnlocked
    type = PartModuleUnlocked
	partModule = ModuleDeployableSolarPanel
	}

	REQUIREMENT:NEEDS[NearFutureSolar]
	{
	name = PartModuleUnlocked
	type = PartModuleUnlocked
	partModule = ModuleCurvedSolarPanel
	}	
}

//check a Science Lab is unlocked	
	REQUIREMENT
{
	name = Any
	type = Any

		REQUIREMENT
{
    name = PartModuleUnlocked
    type = PartModuleUnlocked
	partModule = ModuleScienceLab
	}
		REQUIREMENT:NEEDS[StationScience]
{
    name = PartModuleUnlocked
    type = PartModuleUnlocked
	partModule = ResearchFacility
	}
	}
		
    // Check Station doesn't already exist
    REQUIREMENT
    {
        name = NoStation
        type = Expression

        expression = (!@/targetVessel.IsOrbiting())
    }

    // Make sure we've reached Orbit
    REQUIREMENT
    {
        name = Orbit
        type = Orbit

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Mun
    }
	REQUIREMENT
{
    name = CompleteContract
    type = CompleteContract
	contractType = KerbinStationCore
	minCount = 1
	}
	}

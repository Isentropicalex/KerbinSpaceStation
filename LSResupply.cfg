CONTRACT_TYPE:NEEDS[TACLifeSupport|LifeSupport|IFILifeSupport]
{
// Unique name of the contract type (required)
    name = LSResupply
    title = Do a supply run to @/targetVessel1.
    group = KerbinTier3
	description = Apparently letting our Kerbonauts starve will generate bad publicity, run some supplies up to @/targetVessel1.
    notes = This contract doesn't care how much Life Support you take... but bear in mind it may be a long time before it comes up again.
    synopsis = Take some supplies up to @/targetVessel1.
    completedMessage = Mmm freeze dried bacon *drools*
    minExpiry = 1
    maxExpiry = 7
    deadline = Random(500, 1000)
    cancellable = true
    declinable = true
    rewardScience = 0.0
    rewardReputation = Random(1.0, 20.0)
    rewardFunds = Random(50000, 500000.0)
    failureReputation = Random(1, 10.0)
    failureFunds = Random(1, 50000.0)
    advanceFunds = Random(1, 50000.0)
    weight = 0.8
DATA
{
    type = Vessel
	requiredValue = true
    targetVessel1 = [ LKOStationNEW, MunStationNEW, MinmusStationNEW ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody1 = @/targetVessel1.CelestialBody()
	}

	PARAMETER
	{
	name = LSMission
	type = Sequence
	
	PARAMETER:NEEDS[TACLifeSupport]
	{
	name = Food
	type = HasResource
	
	resource = Food
	minQuantity = 1
	
	title = Have food on board your vessel
	}
	PARAMETER:NEEDS[LifeSupport]
	{
	name = Supplies
	type = HasResource
	
	resource = Supplies
	minQuantity = 1
	
	title = Have Supplies on board your vessel
	}
	PARAMETER:NEEDS[IFILifeSupport]
	{
	name = LifeSupport
	type = HasResource
	
	resource = LifeSupport
	minQuantity = 1
	
	title = Have LifeSupport on board your vessel
	}
	}
	PARAMETER
	{
	name = DockwithStation
    type = Docking
	vessel = @/targetVessel1
	title = Dock with @/targetVessel1
	completeInSequence = true
	}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel1.IsOrbiting())
	}
}